// 
//  Copyright (C) 2013-2015 The Open University
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//  

//
// Gosling rules or JLS
// A set of identifier naming conventions extracted from "The Java Language 
// Specification" -- Java SE 8 edition. 
//
// Note that for testing purposes (i.e. the application of these rules), that 
// Gosling says: "However, these conventions should not be followed slavishly
// if long-held conventional usage dictates otherwise." p132 where he cites the
// use of sin and cos as function names in java.lang.Math.
//
//


class {   // p134
    first-char: upper;
    body: mixed;
    content: NP;           
}

interface {
    first-char: upper;
    body: mixed;
    content: NP, AdjP;
}

// annotations are not tested.
// Gosling 
annotation {
    first-char: upper;
    body: mixed;
    content: NP, VP; // Reasonable?
}

// again, not tested
annotation-member {
    first-char: lower;
    body: mixed;
    content: NP;
}

// Gosling 
enumeration {
    first-char: upper;
    body: mixed;
    content: NP;
}

// Gosling
enumeration-constant {
    first-char: upper;
    body: upper;
    content: NP; 
    separator: _;
}

// Gosling specifies standard typography, and that method identifier 
// names should be verbs. He further specifies that method names 
// accessing or mutating attributes should be named with 'get' and 'set'.
method {
    first-char: lower;
    body: mixed;
    content: VP;
}

method-boolean-noargs {
    first-char: lower;
    body: mixed;
    content: VP;
}

field-constant {
    first-char: upper;
    body: upper;
    separator: _;
    content: AdjP,AdvP,NP,PP,VP,complex;
}

field-variable {
    first-char: lower;
    body: mixed;
    content: NP,abbreviation;
} 

formal-argument {
    first-char: lower;
    body: mixed;
    content: cipher,abbreviation,type-acronym,NP;
} 

local-variable {
    first-char: lower;
    body: mixed;
    content: cipher,abbreviation,type-acronym,NP;
} 

// not used nor tested as there are no standard rules
// here for completeness.
// NP is reasonable, unsure of the typography.
label {
    first-char: lower;
    body: mixed;
    content: NP;
}

cipher-list default {
    b : boolean, byte;
    c : char;
    d : double;
    e : Exception;
    f : float;
    i,j,k : int;
    l : long;
    o : Object;
    s : String;
    v : *;
}
