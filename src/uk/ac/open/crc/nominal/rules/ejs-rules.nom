// 
//  Copyright (C) 2013-2015 The Open University
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 

//
// EJS rules
// A set of identifier naming conventions extracted from the 
// "The Elements of Java Style" Vermeulen et al.. 
//
//


// Vermeulen specifies plurals for the names of classes that group
// related constants, or supply static services. 
// nominal should distinguish those classes
class {   // p20
    first-char: upper;
    body: mixed;
    content: NP;           
}

interface {
    first-char: upper;
    body: mixed;
    content: NP, AdjP;
}


// unknown to Vermeulen
annotation {
    first-char: upper;
    body: mixed;
    content: NP, VP; //???
}

// unknown to Vermeulen
annotation-member {
    first-char: lower;
    body: mixed;
    content: NP;
}

// unknown to Vermeulen
enumeration {
    first-char: upper;
    body: mixed;
    content: NP;
}

// unknown to Vermeulen
enumeration-constant {
    first-char: upper;
    body: upper;
    content: NP;
    separator: _;
}

// Vermeulen specifies standard typography, and that method identifier 
// names should be verbs. He further specifies that method names should
// follow the Java beans conventions of 'is', 'get' and 'set'
// Idris nor these rules are designed to test the latter.
// 
method {
    first-char: lower;
    body: mixed;
    content: VP;
}


field-constant {
    first-char: upper;
    body: upper;
    separator: _;
    content: NP;
}


field-constant-collection-reference {
    content: NP;
    plural: true;
}

field-variable {
    first-char: lower;
    body: mixed;
    content: NP;
} 

field-variable-collection-reference {
    plural: true;
    plural: true;
}

formal-argument {
    first-char: lower;
    body: mixed;
    content: cipher, NP;
} 

formal-argument-collection-reference {
    content: cipher, NP;
    plural: true;
}

local-variable {
    first-char: lower;
    body: mixed;
    content: cipher, NP;
} 

local-variable-collection-reference {
    content: cipher, NP;
    plural: true;
}

// not used nor tested as there are no standard rules
// given for completeness.
label {
    first-char: lower;
    body: mixed;
    content: NP;
}

cipher-list default {
    b : boolean, byte;
    c : char;
    d : double;
    e : Exception;
    f : float;
    g : Graphics;
    i,j,k : int;
    l : long;
    o : Object;
    s : String;
    v : *;
    x,y,z : int,double,float,long,short;
}
